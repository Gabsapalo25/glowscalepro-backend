// index.js

import 'dotenv/config'; // Garante que as variÃ¡veis de ambiente sejam carregadas primeiro
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import quizRoutes from './routes/quizRoutes.js';
import { notFound, errorHandler } from './middleware/errorHandler.js';
import logger, { addRequestId } from './utils/logger.js'; // Importa o logger e o middleware addRequestId
import csurf from 'csurf';
import cookieParser from 'cookie-parser';

const app = express();

// ConfiguraÃ§Ãµes de seguranÃ§a e middlewares
app.use(express.json()); // Permite que o Express leia JSON no corpo das requisiÃ§Ãµes
app.use(express.urlencoded({ extended: true })); // Permite ler dados de formulÃ¡rio codificados em URL

// ConfiguraÃ§Ã£o do CORS
// Apenas allow origin para a sua URL de frontend ou para localhost em desenvolvimento
const allowedOrigins = [
    process.env.FRONTEND_URL,
    process.env.MASTERTOOLS_UNSUBSCRIBE_URL, // Adicionar esta URL, se for diferente
    'http://localhost:3000', // Para desenvolvimento local do frontend
    'http://localhost:5173'  // Para Vue/Vite em desenvolvimento local
];

app.use(cors({
    origin: (origin, callback) => {
        // Permitir requisiÃ§Ãµes sem 'origin' (ex: de ferramentas como Postman, ou requisiÃ§Ãµes same-origin)
        if (!origin) return callback(null, true);
        if (allowedOrigins.includes(origin)) {
            return callback(null, true);
        }
        const msg = `The CORS policy for this site does not allow access from the specified Origin: ${origin}`;
        logger.warn(msg); // Usando o logger centralizado
        return callback(new Error(msg), false);
    },
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-CSRF-Token'],
    credentials: true,
}));

// ConfiguraÃ§Ã£o do Helmet para seguranÃ§a de HTTP headers
app.use(helmet());

// ConfiguraÃ§Ã£o de Rate Limiting para evitar ataques de forÃ§a bruta ou DDoS
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutos
    max: 100, // Limite de 100 requisiÃ§Ãµes por IP a cada 15 minutos
    message: 'Too many requests from this IP, please try again after 15 minutes',
    standardHeaders: true, // Retorna as informaÃ§Ãµes de limite nas headers RateLimit-*
    legacyHeaders: false, // Desabilita as headers X-RateLimit-*
});
app.use(limiter);

// Middleware para cookies (necessÃ¡rio para csurf)
app.use(cookieParser());

// Middleware para CSRF protection (deve vir DEPOIS de cookieParser e express.json/urlencoded)
const csrfProtection = csurf({
    cookie: {
        key: '_csrf',
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production', // Use secure cookies em produÃ§Ã£o
        maxAge: 3600 // 1 hora
    },
});
app.use(csrfProtection); // Aplicar proteÃ§Ã£o CSRF a todas as rotas ou rotas especÃ­ficas

// Middleware para adicionar um ID de requisiÃ§Ã£o ao logger de cada requisiÃ§Ã£o
app.use(addRequestId);

// Rotas da API
app.use('/api', quizRoutes);

// Rota de teste simples para verificar se o servidor estÃ¡ online
app.get('/', (req, res) => {
    logger.info('ðŸ“¥ GET / - Root endpoint accessed.'); // Usando o logger centralizado
    res.status(200).send('GlowScalePro Backend API is running!');
});

// Middleware para lidar com rotas nÃ£o encontradas (404)
app.use(notFound);

// Middleware de tratamento de erros global (deve ser o Ãºltimo app.use)
app.use(errorHandler);

// InicializaÃ§Ã£o do servidor
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => {
    logger.info(`Server running on port ${PORT}`); // Usando o logger centralizado
});
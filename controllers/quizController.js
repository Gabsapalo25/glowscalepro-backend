// controllers/quizController.js

import ActiveCampaignService from '../services/activeCampaignService.js';
import EmailService from '../services/emailService.js';
import { quizzesConfig } from '../config/quizzesConfig.js';
import logger from '../utils/logger.js'; // Importa o logger centralizado

// Inicializa o servi√ßo ActiveCampaign apenas se as vari√°veis de ambiente estiverem configuradas
const activeCampaignService = process.env.ACTIVE_CAMPAIGN_API_URL && process.env.ACTIVE_CAMPAIGN_API_KEY
    ? new ActiveCampaignService(process.env.ACTIVE_CAMPAIGN_API_URL, process.env.ACTIVE_CAMPAIGN_API_KEY)
    : null;

// Inicializa o servi√ßo de e-mail (usando as vari√°veis de ambiente corretas do .env)
const emailService = new EmailService(); // N√£o passa mais config aqui, o EmailService l√™ do env diretamente

// Fun√ß√£o auxiliar para encontrar a configura√ß√£o de um quiz pelo ID
const getQuizConfigById = (quizId) => {
    return quizzesConfig.find(quiz => quiz.quizId === quizId);
};

/**
 * @route GET /api/csrf-token
 * @description Retorna um token CSRF para proteger contra ataques CSRF.
 * O token √© gerado pelo middleware generateCsrfToken.
 * @access Public
 */
export const getCsrfToken = (req, res) => {
    // O token j√° foi gerado e anexado √† requisi√ß√£o pelo middleware generateCsrfToken
    if (!req.csrfToken) {
        logger.error('‚ùå CSRF token was not generated by middleware.');
        return res.status(500).json({ error: 'Failed to generate CSRF token.' });
    }
    logger.info(`‚úÖ CSRF token generated and sent.`);
    res.json({ csrfToken: req.csrfToken });
};

/**
 * @route POST /api/submit-quiz
 * @description Processa a submiss√£o de um quiz, lida com ActiveCampaign e envia e-mail.
 * @access Public (com prote√ß√£o CSRF e valida√ß√£o de payload)
 */
export const sendResult = async (req, res, next) => {
    // Adiciona o requestId ao contexto do log para esta requisi√ß√£o, se dispon√≠vel no req.log
    const requestLogger = req.log || logger;

    const { name, email, score, total, quizId, countryCode, whatsapp, q4, consent } = req.body;

    requestLogger.info(`üìù Recebida solicita√ß√£o POST para /api/submit-quiz para quizId: ${quizId}`);
    requestLogger.debug({ name, email, score, total, quizId, countryCode, whatsapp, q4, consent }, 'Dados do quiz recebidos.');

    const quizConfig = getQuizConfigById(quizId);

    if (!quizConfig) {
        requestLogger.warn(`‚ö†Ô∏è Quiz ID "${quizId}" not found in configuration.`);
        return res.status(400).json({ error: 'Invalid quiz ID.' });
    }

    const { affiliateLink, ctaColor, ctaText, subject, leadTag, activeCampaignFields, emailTemplateFunction } = quizConfig;
    const listId = process.env.AC_LIST_ID_MASTERTOOLS_ALL;
    const unsubscribeTagId = process.env.AC_UNSUBSCRIBE_TAG_ID; // Usado para e-mails transacionais, se necess√°rio

    if (!listId) {
        requestLogger.error('‚ùå AC_LIST_ID_MASTERTOOLS_ALL is not defined in environment variables.');
        return res.status(500).json({ error: 'ActiveCampaign list ID not configured.' });
    }

    // Prepare custom fields for ActiveCampaign
    const customFields = [
        { fieldId: activeCampaignFields.scoreFieldId, value: String(score) }, // Score
        { fieldId: activeCampaignFields.q4FieldId, value: q4 },              // Q4 Answer
    ];

    if (whatsapp) {
        const fullWhatsapp = countryCode && whatsapp ? `${countryCode}${whatsapp}` : whatsapp;
        customFields.push({ fieldId: activeCampaignFields.whatsappFieldId, value: fullWhatsapp });
    }

    let contactId;
    try {
        if (activeCampaignService && activeCampaignService.isEnabled) { // Verifica se o servi√ßo AC est√° habilitado
            requestLogger.info(`‚ú® Processando contato no ActiveCampaign para ${email}...`);
            contactId = await activeCampaignService.createOrUpdateContactAndFields(
                email,
                listId,
                customFields,
                name,
                ''
            );
            requestLogger.info(`‚úÖ Contato ${contactId} processado no ActiveCampaign.`);

            if (leadTag) {
                requestLogger.info(`üè∑Ô∏è Adicionando tag ${leadTag} ao contato ${contactId}.`);
                await activeCampaignService.addTagToContact(contactId, leadTag);
                requestLogger.info(`‚úÖ Tag ${leadTag} adicionada ao contato ${contactId}.`);
            }
        } else {
            requestLogger.warn('‚ùå ActiveCampaign service not initialized or enabled. Skipping AC operations.');
        }

        // Enviar E-mail de Resultado
        requestLogger.info(`üìß Preparando para enviar e-mail de resultado para ${email}...`);
        const emailContent = emailTemplateFunction({
            userName: name,
            quizScore: score,
            quizTotal: total,
            affiliateLink,
            ctaColor,
            ctaText,
            unsubscribeTagId: unsubscribeTagId,
            adminEmail: process.env.ADMIN_EMAIL
        });

        await emailService.sendEmail({
            from: process.env.SMTP_USER, // Remetente (usando a var de env correta)
            to: email,                   // Destinat√°rio
            subject: subject,            // Assunto do e-mail
            html: emailContent           // Conte√∫do HTML do e-mail
        });
        requestLogger.info(`‚úÖ E-mail de resultado enviado com sucesso para ${email}.`);

        res.status(200).json({
            message: 'Quiz submitted successfully. Results sent to your email!',
            contactId: contactId,
        });

    } catch (error) {
        requestLogger.error({ error_message: error.message, stack: error.stack, email }, '‚ùå Erro ao processar submiss√£o do quiz.');
        next(error);
    }
};
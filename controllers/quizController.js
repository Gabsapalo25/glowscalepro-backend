// controllers/quizController.js

import ActiveCampaignService from '../services/activeCampaignService.js';
import EmailService from '../services/emailService.js';
import { quizzesConfig } from '../config/quizzesConfig.js'; // ALTERADO: Importa o array quizzesConfig diretamente
import pino from 'pino';

// Configura√ß√£o do logger
const logger = pino({
    level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
    transport: {
        target: 'pino-pretty',
        options: {
            colorize: true,
            ignore: 'pid,hostname',
        },
    },
});

// Inicializa o servi√ßo ActiveCampaign apenas se as vari√°veis de ambiente estiverem configuradas
const activeCampaignService = process.env.ACTIVE_CAMPAIGN_API_URL && process.env.ACTIVE_CAMPAIGN_API_KEY
    ? new ActiveCampaignService(process.env.ACTIVE_CAMPAIGN_API_URL, process.env.ACTIVE_CAMPAIGN_API_KEY)
    : null;

// Inicializa o servi√ßo de e-mail (usando as vari√°veis para configurar o Nodemailer)
const emailService = new EmailService({
    host: process.env.EMAIL_HOST,
    port: process.env.EMAIL_PORT,
    secure: process.env.EMAIL_SECURE === 'true', // Converte a string para boolean
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
    },
});

// NOVO: Fun√ß√£o auxiliar para encontrar a configura√ß√£o de um quiz pelo ID
const getQuizConfigById = (quizId) => {
    return quizzesConfig.find(quiz => quiz.quizId === quizId);
};

/**
 * @route GET /api/csrf-token
 * @description Retorna um token CSRF para proteger contra ataques CSRF.
 * O token √© gerado pelo middleware generateCsrfToken.
 * @access Public
 */
export const getCsrfToken = (req, res) => {
    // O token j√° foi gerado e anexado √† requisi√ß√£o pelo middleware generateCsrfToken
    if (!req.csrfToken) {
        logger.error('‚ùå CSRF token was not generated by middleware.');
        return res.status(500).json({ error: 'Failed to generate CSRF token.' });
    }
    logger.info(`‚úÖ CSRF token generated and sent.`);
    res.json({ csrfToken: req.csrfToken });
};

/**
 * @route POST /api/submit-quiz
 * @description Processa a submiss√£o de um quiz, lida com ActiveCampaign e envia e-mail.
 * @access Public (com prote√ß√£o CSRF e valida√ß√£o de payload)
 */
export const sendResult = async (req, res, next) => {
    const { name, email, score, total, quizId, countryCode, whatsapp, q4, consent } = req.body;

    logger.info(`üîç Recebida solicita√ß√£o POST para /api/submit-quiz para quizId: ${quizId}`);
    logger.debug({ name, email, score, total, quizId, countryCode, whatsapp, q4, consent }, 'Dados do quiz recebidos.');

    // ALTERADO: Usando a nova fun√ß√£o auxiliar para obter a configura√ß√£o do quiz
    const quizConfig = getQuizConfigById(quizId);

    if (!quizConfig) {
        logger.warn(`‚ö†Ô∏è Quiz ID "${quizId}" not found in configuration.`);
        return res.status(400).json({ error: 'Invalid quiz ID.' });
    }

    const { affiliateLink, ctaColor, ctaText, subject, leadTag, activeCampaignFields, emailTemplateFunction } = quizConfig;
    const listId = process.env.AC_LIST_ID_MASTERTOOLS_ALL;
    const unsubscribeTagId = process.env.UNSUBSCRIBE_TAG_ID; // Usado para e-mails transacionais, se necess√°rio

    if (!listId) {
        logger.error('‚ùå AC_LIST_ID_MASTERTOOLS_ALL is not defined in environment variables.');
        return res.status(500).json({ error: 'ActiveCampaign list ID not configured.' });
    }

    // Prepare custom fields for ActiveCampaign
    const customFields = [
        { fieldId: activeCampaignFields.scoreFieldId, value: String(score) }, // Score
        { fieldId: activeCampaignFields.q4FieldId, value: q4 },              // Q4 Answer
    ];

    if (whatsapp) {
        // Concatena countryCode e whatsapp se ambos existirem, sen√£o apenas whatsapp
        const fullWhatsapp = countryCode && whatsapp ? `${countryCode}${whatsapp}` : whatsapp;
        customFields.push({ fieldId: activeCampaignFields.whatsappFieldId, value: fullWhatsapp });
    } else {
        // Se whatsapp n√£o foi fornecido, garanta que o campo seja limpo ou ignorado
        // Dependendo da l√≥gica do AC, pode ser necess√°rio enviar um valor vazio ou n√£o enviar o campo.
        // Por agora, se n√£o for enviado, ele simplesmente n√£o ser√° atualizado para vazio.
    }

    let contactId;
    try {
        if (activeCampaignService) {
            logger.info(`‚úâÔ∏è Processando contato no ActiveCampaign para ${email}...`);
            contactId = await activeCampaignService.createOrUpdateContactAndFields(
                email,
                listId,
                customFields,
                name,
                '' // Sem sobrenome por enquanto
            );
            logger.info(`‚úÖ Contato ${contactId} processado no ActiveCampaign.`);

            if (leadTag) {
                logger.info(`üè∑Ô∏è Adicionando tag ${leadTag} ao contato ${contactId}.`);
                await activeCampaignService.addTagToContact(contactId, leadTag);
                logger.info(`‚úÖ Tag ${leadTag} adicionada ao contato ${contactId}.`);
            }
        } else {
            logger.warn('‚ùå ActiveCampaign service not initialized. Skipping AC operations.');
        }

        // Enviar E-mail de Resultado
        logger.info(`üìß Preparando para enviar e-mail de resultado para ${email}...`);
        const emailContent = emailTemplateFunction({
            userName: name,
            quizScore: score,
            quizTotal: total,
            affiliateLink,
            ctaColor,
            ctaText,
            unsubscribeTagId: unsubscribeTagId, // Passa a tag de unsubscribe
            adminEmail: process.env.ADMIN_EMAIL // Passa o e-mail do admin, se necess√°rio no template
        });

        await emailService.sendEmail(
            process.env.ADMIN_EMAIL, // Remetente
            email,                   // Destinat√°rio
            subject,                 // Assunto do e-mail
            emailContent             // Conte√∫do HTML do e-mail
        );
        logger.info(`‚úÖ E-mail de resultado enviado com sucesso para ${email}.`);

        res.status(200).json({
            message: 'Quiz submitted successfully. Results sent to your email!',
            contactId: contactId,
        });

    } catch (error) {
        logger.error({ error: error.message, stack: error.stack, email }, '‚ùå Erro ao processar submiss√£o do quiz.');
        // Passa o erro para o middleware de tratamento de erros global
        next(error);
    }
};
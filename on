[1mdiff --git a/controllers/quizController.js b/controllers/quizController.js[m
[1mindex 59c24b0..ccbe563 100644[m
[1m--- a/controllers/quizController.js[m
[1m+++ b/controllers/quizController.js[m
[36m@@ -2,11 +2,60 @@[m [mimport fs from "fs";[m
 import path from "path";[m
 import { fileURLToPath } from "url";[m
 import { createOrUpdateContact, applyTagToContact } from "../services/activeCampaign.js";[m
[32m+[m[32mimport { createLogger, format, transports } from "winston";[m
 [m
 // Corrigindo __dirname para ES Modules[m
 const __filename = fileURLToPath(import.meta.url);[m
 const __dirname = path.dirname(__filename);[m
 [m
[32m+[m[32m// ConfiguraÃ§Ã£o do logger para produÃ§Ã£o e desenvolvimento[m
[32m+[m[32mconst logger = createLogger({[m
[32m+[m[32m  level: process.env.NODE_ENV === "production" ? "info" : "debug",[m
[32m+[m[32m  format: format.combine([m
[32m+[m[32m    format.timestamp({ format: "YYYY-MM-DD HH:mm:ss" }),[m
[32m+[m[32m    format.json(),[m
[32m+[m[32m    format.errors({ stack: true }) // Inclui stack trace em erros[m
[32m+[m[32m  ),[m
[32m+[m[32m  transports: [[m
[32m+[m[32m    new transports.Console({[m
[32m+[m[32m      format: format.combine([m
[32m+[m[32m        format.colorize(),[m
[32m+[m[32m        format.printf(({ timestamp, level, message, ...metadata }) => {[m
[32m+[m[32m          const meta = Object.keys(metadata).length ? JSON.stringify(metadata, null, 2) : "";[m
[32m+[m[32m          return `[${timestamp}] ${level}: ${message} ${meta}`;[m
[32m+[m[32m        })[m
[32m+[m[32m      ),[m
[32m+[m[32m    }),[m
[32m+[m[32m    ...(process.env.NODE_ENV === "production"[m
[32m+[m[32m      ? [] // Evita escrita em arquivos no Render[m
[32m+[m[32m      : [[m
[32m+[m[32m          new transports.File({[m
[32m+[m[32m            filename: path.join(__dirname, "../logs/error.log"),[m
[32m+[m[32m            level: "error",[m
[32m+[m[32m            maxsize: 5242880, // 5MB[m
[32m+[m[32m            maxFiles: 5,[m
[32m+[m[32m          }),[m
[32m+[m[32m          new transports.File({[m
[32m+[m[32m            filename: path.join(__dirname, "../logs/combined.log"),[m
[32m+[m[32m            maxsize: 5242880,[m
[32m+[m[32m            maxFiles: 5,[m
[32m+[m[32m          }),[m
[32m+[m[32m        ]),[m
[32m+[m[32m  ],[m
[32m+[m[32m  exceptionHandlers: [[m
[32m+[m[32m    new transports.Console(),[m
[32m+[m[32m    ...(process.env.NODE_ENV === "production"[m
[32m+[m[32m      ? [][m
[32m+[m[32m      : [new transports.File({ filename: path.join(__dirname, "../logs/exceptions.log") })]),[m
[32m+[m[32m  ],[m
[32m+[m[32m  rejectionHandlers: [[m
[32m+[m[32m    new transports.Console(),[m
[32m+[m[32m    ...(process.env.NODE_ENV === "production"[m
[32m+[m[32m      ? [][m
[32m+[m[32m      : [new transports.File({ filename: path.join(__dirname, "../logs/rejections.log") })]),[m
[32m+[m[32m  ],[m
[32m+[m[32m});[m
[32m+[m
 // Caminho do arquivo de dados[m
 const dataPath = path.join(__dirname, "../data/data.json");[m
 [m
[36m@@ -15,20 +64,29 @@[m [mexport const handleQuizResult = async (req, res) => {[m
   try {[m
     const { name, email, tagId } = req.body;[m
 [m
[31m-    // Verifica se todos os campos estÃ£o presentes[m
[32m+[m[32m    // ValidaÃ§Ã£o[m
     if (!name || !email || !tagId) {[m
[31m-      return res.status(400).json({ error: "Missing required fields" });[m
[32m+[m[32m      logger.error("Campos obrigatÃ³rios ausentes", { name, email, tagId });[m
[32m+[m[32m      return res.status(400).json({ error: "Campos obrigatÃ³rios ausentes" });[m
[32m+[m[32m    }[m
[32m+[m[32m    const emailRegex = /^[^\s@]+@[^\s@]+\.([^\s@]{2,})$/;[m
[32m+[m[32m    if (!emailRegex.test(email)) {[m
[32m+[m[32m      logger.error("Formato de email invÃ¡lido", { email });[m
[32m+[m[32m      return res.status(400).json({ error: "Formato de email invÃ¡lido" });[m
     }[m
 [m
[32m+[m[32m    logger.info("Processando resultado do quiz", { name, email, tagId });[m
[32m+[m
     // Adiciona ou atualiza o contato no ActiveCampaign[m
[31m-    await createOrUpdateContact({ email, name });[m
[32m+[m[32m    logger.debug("Criando/atualizando contato no ActiveCampaign", { email, name });[m
[32m+[m[32m    const contact = await createOrUpdateContact({ email, name });[m
 [m
     // Aplica a tag ao contato[m
[32m+[m[32m    logger.debug("Aplicando tag ao contato", { email, tagId });[m
     await applyTagToContact(email, tagId);[m
 [m
     // Salva no data.json local[m
     const newLead = { name, email, tagId, date: new Date().toISOString() };[m
[31m-[m
     let data = [];[m
     if (fs.existsSync(dataPath)) {[m
       const fileContent = fs.readFileSync(dataPath, "utf-8");[m
[36m@@ -36,11 +94,16 @@[m [mexport const handleQuizResult = async (req, res) => {[m
     }[m
 [m
     data.push(newLead);[m
[31m-    fs.writeFileSync(dataPath, JSON.stringify(data, null, 2), "utf-8");[m
[32m+[m[32m    try {[m
[32m+[m[32m      fs.writeFileSync(dataPath, JSON.stringify(data, null, 2), "utf-8");[m
[32m+[m[32m      logger.info("Lead salvo em data.json", { newLead });[m
[32m+[m[32m    } catch (fileError) {[m
[32m+[m[32m      logger.warn("Falha ao salvar em data.json", { error: fileError.message });[m
[32m+[m[32m    }[m
 [m
[31m-    res.status(200).json({ message: "Lead processed successfully" });[m
[32m+[m[32m    res.status(200).json({ message: "Lead processado com sucesso" });[m
   } catch (error) {[m
[31m-    console.error("Error processing quiz result:", error);[m
[31m-    res.status(500).json({ error: "Internal server error" });[m
[32m+[m[32m    logger.error("Erro ao processar resultado do quiz", { error: error.message, stack: error.stack });[m
[32m+[m[32m    res.status(500).json({ error: "Erro interno do servidor" });[m
   }[m
 };[m
\ No newline at end of file[m
